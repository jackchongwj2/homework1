@model homework1.Models.Result

@{
    ViewData["Title"] = "Create";
}

<h1 class="mt-4">Create</h1>

<h4 class="mt-4">Result</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="StudentId" class="control-label">Student</label>
                <select asp-for="StudentId" class="form-control" asp-items="ViewBag.StudentId" id="studentDropdown">
                    <option value="">Select a Student</option>
                </select>
                <span asp-validation-for="StudentId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="SubjectId" class="control-label">Subject</label>
                <select asp-for="SubjectId" class="form-control" id="subjectDropdown">
                </select>
                <span asp-validation-for="SubjectId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Marks" class="control-label">Marks</label>
                <input asp-for="Marks" class="form-control" type="number" min="0" max="100" step="0.1" id="marksInput"/>
                <span asp-validation-for="Marks" class="text-danger"></span>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="marksNullableCheckbox" />
                <label class="form-check-label" for="marksNullableCheckbox"> No Marks</label>
            </div>
            <div class="form-group mt-4">
                <button type="submit" class="btn btn-success">Create</button>
                <a class="btn btn-secondary ml-2" asp-action="Index">Back to List</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Get the checkbox and marks input elements
        var marksNullableCheckbox = document.getElementById('marksNullableCheckbox');
        var marksInput = document.querySelector('[name="Marks"]');

        // Check if elements exist before using them
        if (marksNullableCheckbox && marksInput) {
            // Add an event listener to the checkbox
            marksNullableCheckbox.addEventListener('change', function () {
                // Disable or enable the marks input based on the checkbox state
                marksInput.disabled = this.checked;

                // Clear the value in the marks input when the checkbox is checked
                if (this.checked) {
                    marksInput.value = '';
                }
            });
        }

        // Get the dropdown elements
        var studentDropdown = document.getElementById('studentDropdown');
        var subjectDropdown = document.getElementById('subjectDropdown');
        var noSubjectsMessage = 'No subjects left to take';
        var selectSubjectOption = 'Select a Subject';

        // Add an event listener to the student dropdown
        studentDropdown.addEventListener('change', function () {
            // Get the selected student ID
            var selectedStudentId = this.value;

            // Clear existing options
            subjectDropdown.innerHTML = '';

            // Check if a valid student ID is selected
            if (selectedStudentId !== "") {
                // Enable the subject dropdown
                subjectDropdown.disabled = false;

                // Make an Ajax request to retrieve subjects not taken by the selected student
                $.ajax({
                    url: '/Results/GetAvailableSubjectsByStudentId',
                    type: 'GET',
                    dataType: 'json',
                    data: { studentId: selectedStudentId },
                    success: function (subjects) {
                        if (subjects.length > 0) {
                            // Add the "Select a Subject" option
                            var selectOption = document.createElement('option');
                            selectOption.value = '';
                            selectOption.text = selectSubjectOption;
                            subjectDropdown.add(selectOption);

                            // Add new options
                            subjects.forEach(function (subject) {
                                var option = document.createElement('option');
                                option.value = subject.subjectId;
                                option.text = subject.name;
                                subjectDropdown.add(option);
                            });
                        } else {
                            // If no subjects are available, disable the subject dropdown and display a message
                            subjectDropdown.disabled = true;
                            subjectDropdown.innerHTML = `<option disabled selected>${noSubjectsMessage}</option>`;
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching subjects:', error);
                    }
                });
            } else {
                // If no valid student ID is selected, disable and reset the subject dropdown
                subjectDropdown.disabled = true;
            }
        });
    </script>
}